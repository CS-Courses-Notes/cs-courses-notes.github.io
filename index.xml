<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS-Courses-Notes on My New Hugo Site</title>
    <link>http://CS-Courses-Notes.github.io/</link>
    <description>Recent content in CS-Courses-Notes on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://CS-Courses-Notes.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Course Introduction &amp; Relational Model</title>
      <link>http://CS-Courses-Notes.github.io/cmucourses/cmu-15-445/notes/lecture01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/cmucourses/cmu-15-445/notes/lecture01/</guid>
      <description>This course is on the design and implementation of disk-oriented database management systems.  Course Outline  Relational Databases Storage Execution Concurrency Control Recovery Distributed Databases Potpourri   Textbook Database System Concepts. 7th Edition. Silbersschatz, Korth, &amp;amp; Sudarshan
 Projects You will build your own storage manager from scratch of the course of the semester. Each project builds on the previous one.
 Let&amp;rsquo;s get started!
 About database:  A database is organized collection of inter-related data that models some aspect of the real-world.</description>
    </item>
    
    <item>
      <title>Intermediate Presentation</title>
      <link>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/intermediate-representation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/intermediate-representation/</guid>
      <description>Layout:  Compilers and Static Analyzers AST vs. IR IR: Three-Address Code 3AC in Real Static Analyzer: Soot Static Single Assignment Basic Blocks Control Flow Graphs     Finishing this class, you need to know the answers to the following questions:
 The relation between compilers and static analyzers Understand 3AC and its common forms (in IR jimple) How to build basic blocks on top of IR How to construct control flow graphs on top of BBS.</description>
    </item>
    
    <item>
      <title>Advanced SQL</title>
      <link>http://CS-Courses-Notes.github.io/cmucourses/cmu-15-445/notes/lecture02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/cmucourses/cmu-15-445/notes/lecture02/</guid>
      <description>History of SQL Originally &amp;ldquo;SEQUEL&amp;rdquo; from IBM&amp;rsquo;s System R prototype.
   Structured English Query Language.
  Adopted by Oracle in the 1970s.
   ANSI Standard in 1986. ISO in 1987 &amp;ndash;&amp;gt; Structured Query Language
Current standard is SQL 2016
 SQL 2016 : JSON, Polymorphic tables SQL 2011 : Temporal DBs, Pipelined DML SQL 2008: TRUNCATE, Fancy ORDER SQL 2003: XML, windows, sequences, auto-generated IDs SQL 1999: Regex, triggers, OO   Relational Languages:</description>
    </item>
    
    <item>
      <title>Data Flow Analysis Applications I</title>
      <link>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-i/</guid>
      <description>Layout of these lectures:
 Overview of Data Flow Analysis Preliminaries of Data Flow Analysis Reaching Definitions Analysis Live Variable Analysis Available Expression Analysis  Overview Data Flow Analysis &amp;ndash;&amp;gt; How Data flows on CFG? &amp;ndash;&amp;gt; How application-specific Data Flows through the Nodes and Edges of CFG( a program ) ?
Recall 1st lecture:
 We will do abstraction regarding the application-specific data (Like sign abstraction) Over-approximation will occur in the flow process to guarantee soundness.</description>
    </item>
    
    <item>
      <title>Data Flow Analysis Applications II</title>
      <link>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-ii/</guid>
      <description>Definition:
 Live variables analysis tells whether the value of variable v at program point p could be used along some path in CFG starting at p. If so, v is live at p; otherwise, v is dead at p.  One application:
 Information of live variables can be used for register allocations.  Understanding Live Variables Analysis
graph TD; 1[v = 3] 2[B. ?] 3[p1. ... = v] 4[p2.</description>
    </item>
    
    <item>
      <title>Database Storage - Part I</title>
      <link>http://CS-Courses-Notes.github.io/cmucourses/cmu-15-445/notes/lecture03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/cmucourses/cmu-15-445/notes/lecture03/</guid>
      <description>Overview:
 We now understand what a database looks like at a logical level and how to write queries to read/write data from it. We will next learn how to build software that manages a database.   Layout of Database:
graph TD; 1[Query Planning] 2[Operator Execution] 3[Access Methods] 4[Buffer Pool Manager] 5[Disk Manager] 1 --&amp;gt; 2 2 --&amp;gt; 3 3 --&amp;gt; 4 4 --&amp;gt; 5 We will go through these different layers bottom-up.</description>
    </item>
    
    <item>
      <title>Static Flow Analysis Applications III</title>
      <link>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-iii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-iii/</guid>
      <description>What is Available Expression Analysis An expression x op y is available at a program point p if
 all paths from the entry to p must pass through the evaluation of x op y, and after the last evaluation of x op y, there is no redefinition of x or y  Note that this is a must analysis.
What we can do with this definition  This definition means at program p, we can replace expression x op y by the result of its last evaluation The information of available expressions can be used for detecting global common subexpressions.</description>
    </item>
    
    <item>
      <title>Data flow Analysis IV - Foundations I</title>
      <link>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-iv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-iv/</guid>
      <description>Layout of contents:
 Iterative Algorithm, Another view Partial Order Upper and Lower Bounds Lattice, Semilattice, Complete and Product Lattice Data Flow Analysis Framework via Lattice Monotonicity and Fixed Point Theorem Relate Iterative Algorithm to Fixed Point Theorem May/Must Analysis, A Lattice View Distributivity and MOP Constant Propagation Worklist Algorithm  View Iterative Algorithm in Another Way  Given a CFG(a program) with k nodes, the iterative algorithm updates OUT[n] for every node in each iteration.</description>
    </item>
    
    <item>
      <title>Data Flow Analysis V : Foundations II</title>
      <link>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-v/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/data-flow-analysis-v/</guid>
      <description>The first thing we need to deal with is relating the algorithm to the function we talked about in the last lecture.
In each iteration of our algorithm, we have a (L1, L2, &amp;hellip; ,Lk), $L^k$ for short.
It is equivalent to think that we apply function F which consists of
 transfer function $f_i$: L -&amp;gt; L for every node join/meet function $\sqcup / \sqcap$: L * L -&amp;gt; L for control flow confluence  Now we only need to prove that F is monotonic.</description>
    </item>
    
    <item>
      <title>Interprocedural Analysis</title>
      <link>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/interprocedural-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/njucourses/static-program-analysis/lecture/interprocedural-analysis/</guid>
      <description>Contents
 Motivation Call Graph Construction(CHA) Interprocedural Control-Flow Graph Interprocedural Data-Flow-Analysis   So far, all analyses we learned are intraprocedural. So how to deal with method calls ?
 Make the most conservative assumption for method calls, for safe-approximation  Example. Const Propagation
void foo(){ int n = ten(); addOne(42); } int ten(){ return 10; } int addOne(int x){ int y = x + 1; return y; } We assume that :</description>
    </item>
    
    <item>
      <title></title>
      <link>http://CS-Courses-Notes.github.io/mitcourses/6.s081/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://CS-Courses-Notes.github.io/mitcourses/6.s081/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
